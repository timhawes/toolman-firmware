name: CI

on:
  push:
    branches:
      - main
    tags:
      - v0.0.*
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.platformio/.cache
        key: ${{ runner.os }}-pio
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade pre-commit
        python -m pip install --upgrade platformio
    - name: pre-commit
      run: |
        pre-commit run --all-files
    - name: Build PlatformIO Project
      run: pio run
    - name: Prepare variables to name the artifacts
      run: |
        echo "TODAY=$(date +'%Y%m%d')" >> $GITHUB_ENV
        echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
    - name: Rename the artifacts
      run: |
        mkdir firmware
        for variant in $(cd .pio/build && echo *); do
          if [ -d .pio/build/$variant ]; then
            md5=$(md5sum .pio/build/$variant/firmware.bin | cut -d' ' -f1)
            if [ "${{github.ref_type}}" = "tag" ]; then
              cp .pio/build/$variant/firmware.bin firmware/toolman-${{github.ref_name}}-$variant-$md5.bin
              cp .pio/build/$variant/firmware.elf firmware/toolman-${{github.ref_name}}-$variant-$md5.elf
            elif [ "${{github.ref_type}}" = "branch" ]; then
              cp .pio/build/$variant/firmware.bin firmware/toolman-${{env.TODAY}}-${{github.ref_name}}-${{env.SHORT_SHA}}-$variant-$md5.bin
              cp .pio/build/$variant/firmware.elf firmware/toolman-${{env.TODAY}}-${{github.ref_name}}-${{env.SHORT_SHA}}-$variant-$md5.elf
            fi
          fi
        done
    - uses: actions/upload-artifact@v3
      with:
        name: firmware
        path: firmware/

  upload:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: firmware
          path: firmware
      - name: Upload
        run: |
          for filename in *; do
            curl \
              -X PUT \
              --oauth2-bearer ${{secrets.ARTIFACT_KEY}} \
              --header "Content-Type: application/octet-stream" \
              --data-binary @$filename \
              --fail \
              ${{vars.ARTIFACT_URL}}/$filename
          done
        working-directory: firmware
